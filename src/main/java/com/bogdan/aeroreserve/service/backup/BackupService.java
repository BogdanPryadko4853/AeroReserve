package com.bogdan.aeroreserve.service.backup;

import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
 *
 * @author Bogdan
 * @version 1.0
 */
@Slf4j
@Service
public class BackupService {

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
     *
     * @return —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    public String createBackup() {
        try {
            log.info("Starting database backup creation");

            // –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ, –æ–±—Ä–∞—â–∞—è—Å—å –∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
            String command = "docker exec backup-service /backup-scripts/backup.sh";

            Process process = Runtime.getRuntime().exec(command);
            String result = readProcessOutput(process, "Backup");

            log.info("Backup completed: {}", result);
            return result;

        } catch (Exception e) {
            log.error("Error creating backup", e);
            return "Error creating backup: " + e.getMessage();
        }
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞
     *
     * @param backupFileName –∏–º—è —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
     * @return —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    public String restoreBackup(String backupFileName) {
        try {
            log.info("Starting database restore from: {}", backupFileName);

            String command = String.format(
                    "docker exec backup-service /backup-scripts/restore.sh %s",
                    backupFileName
            );

            Process process = Runtime.getRuntime().exec(command);
            String result = readProcessOutput(process, "Restore");

            log.info("Restore completed: {}", result);
            return result;

        } catch (Exception e) {
            log.error("Error restoring backup", e);
            return "Error restoring backup: " + e.getMessage();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤ –∏–∑ MinIO —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
     *
     * @return —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –±—ç–∫–∞–ø–æ–≤
     */
    public List<String> listBackups() {
        List<String> backups = new ArrayList<>();
        try {
            log.info("Listing backups from MinIO using mc client");

            String command = "docker exec backup-service mc ls myminio/backups/";

            log.info("Executing command: {}", command);

            Process process = Runtime.getRuntime().exec(command);
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

            String line;
            while ((line = reader.readLine()) != null) {
                log.info("MC OUTPUT: {}", line);
                if (!line.trim().isEmpty()) {
                    String fileName = parseMcOutput(line);
                    if (isBackupFile(fileName)) {
                        backups.add(fileName);
                        log.info("Found backup: {}", fileName);
                    }
                }
            }

            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
            StringBuilder errors = new StringBuilder();
            while ((line = errorReader.readLine()) != null) {
                errors.append(line).append("\n");
            }
            if (!errors.isEmpty()) {
                log.error("MC CLI errors: {}", errors.toString());
            }

            backups.sort((a, b) -> b.compareTo(a));
            log.info("Found {} backup files using mc", backups.size());

        } catch (Exception e) {
            log.error("Error listing backups with mc", e);
        }
        return backups;
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã mc ls –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
     * –§–æ—Ä–º–∞—Ç: [2024-01-01 12:00:00 UTC] 123KB backup_filename.sql.gz
     *
     * @param line —Å—Ç—Ä–æ–∫–∞ –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã mc ls
     * @return –∏–º—è —Ñ–∞–π–ª–∞ –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
     */
    private String parseMcOutput(String line) {
        try {
            String[] parts = line.split("\\s+");
            for (int i = parts.length - 1; i >= 0; i--) {
                String part = parts[i].trim();
                if (!part.isEmpty() && !part.equals("UTC]") && !part.matches("\\d+[BKM]")) {
                    return part;
                }
            }
            return null;
        } catch (Exception e) {
            log.error("Error parsing mc output: {}", line, e);
            return null;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤–∞–ª–∏–¥–Ω—ã–º —Ñ–∞–π–ª–æ–º –±—ç–∫–∞–ø–∞
     *
     * @param fileName –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @return true –µ—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –±—ç–∫–∞–ø–∞
     */
    private boolean isBackupFile(String fileName) {
        return fileName != null &&
                fileName.startsWith("backup_") &&
                (fileName.endsWith(".sql") || fileName.endsWith(".gz"));
    }

    /**
     * –ß–∏—Ç–∞–µ—Ç –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
     *
     * @param process   –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
     * @param operation –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     * @return —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
     * @throws Exception –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞
     */
    private String readProcessOutput(Process process, String operation) throws Exception {
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
        StringBuilder output = new StringBuilder();
        String line;

        while ((line = reader.readLine()) != null) {
            output.append(line).append("\n");
            log.info("{}: {}", operation, line);
        }

        while ((line = errorReader.readLine()) != null) {
            output.append("ERROR: ").append(line).append("\n");
            log.error("{} ERROR: {}", operation, line);
        }

        int exitCode = process.waitFor();
        if (exitCode == 0) {
            return operation + " completed successfully:\n" + output;
        } else {
            return operation + " failed with exit code " + exitCode + ":\n" + output;
        }
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 2:00 –Ω–æ—á–∏
     */
    @Scheduled(cron = "0 0 2 * * ?")
    public void scheduledBackup() {
        log.info("üîÑ Starting scheduled database backup");
        String result = createBackup();
        log.info("üìã Scheduled backup result: {}", result);
    }
}